-- SRC_PRODUCT_NAME (OK플라자, 펜타온 자동완성용 상품명)
CREATE   VIEW dbo.SRC_GOOD_NAME
WITH SCHEMABINDING
AS
SELECT	AA.GOOD_NAME
,		SUM(ISNULL(BB.ORDER_CNT,0)) AS ORDER_CNT
,		STUFF((
					SELECT	',' + A.BRANCHID
					FROM	(
							SELECT	DISTINCT B.GOOD_NAME
							,		A.BRANCHID
							FROM	(
									
									SELECT	A.GOOD_IDEN_NUMB
									,		C.BRANCHID
									FROM	dbo.MCGOODDISPLAY A WITH(NOLOCK)
									INNER JOIN	dbo.MCGOODDISPLAY B WITH(NOLOCK)
										ON	A.GOOD_IDEN_NUMB = B.GOOD_IDEN_NUMB
										AND	A.VENDORID = B.VENDORID
									INNER JOIN	dbo.SMPBRANCHS C WITH(NOLOCK)
										ON	A.DISPLAY_TYPE_CD = C.AREATYPE
										AND CASE B.DISPLAY_TYPE_CD WHEN '0' THEN C.WORKID ELSE B.DISPLAY_TYPE_CD END = C.WORKID
									INNER JOIN dbo.MCGOODVENDOR D WITH(NOLOCK)
										ON	A.GOOD_IDEN_NUMB = D.GOOD_IDEN_NUMB
										AND	A.VENDORID = D.VENDORID
									WHERE	A.DISPLAY_TYPE = '10'
									AND		B.DISPLAY_TYPE = '20'
									AND		A.DISPLAY_TYPE_CD != '99'
									AND		D.ISUSE = '1'

									UNION

									SELECT	A.GOOD_IDEN_NUMB
									,		C.BRANCHID
									FROM	dbo.MCGOODDISPLAY A WITH(NOLOCK)
									INNER JOIN	dbo.MCGOODDISPLAY B WITH(NOLOCK)
										ON	A.GOOD_IDEN_NUMB = B.GOOD_IDEN_NUMB
										AND	A.VENDORID = B.VENDORID
									INNER JOIN	dbo.SMPBRANCHS C WITH(NOLOCK)
										ON	CASE B.DISPLAY_TYPE_CD WHEN '0' THEN C.WORKID ELSE B.DISPLAY_TYPE_CD END = C.WORKID 
									INNER JOIN dbo.MCGOODVENDOR D WITH(NOLOCK)
										ON	A.GOOD_IDEN_NUMB = D.GOOD_IDEN_NUMB
										AND	A.VENDORID = D.VENDORID
									WHERE	A.DISPLAY_TYPE = '10'
									AND		B.DISPLAY_TYPE = '20'
									AND		A.DISPLAY_TYPE_CD = '99'
									AND		D.ISUSE = '1'

									UNION
						
									SELECT	A.GOOD_IDEN_NUMB
									,		A.BRANCHID
									FROM	dbo.MCGOODDISPLAYBRANCH A WITH(NOLOCK)
									INNER JOIN	dbo.SMPBORGS B WITH(NOLOCK)
										ON A.BRANCHID = B.BORGID
									INNER JOIN dbo.MCGOODVENDOR D WITH(NOLOCK)
										ON	A.GOOD_IDEN_NUMB = D.GOOD_IDEN_NUMB
										AND	A.VENDORID = D.VENDORID
									WHERE	B.ISUSE = '1'
									AND		D.ISUSE = '1'
							) A
							INNER JOIN dbo.MCGOOD B
								ON	A.GOOD_IDEN_NUMB = B.GOOD_IDEN_NUMB
					) A
					WHERE	A.GOOD_NAME = AA.GOOD_NAME
		FOR XML PATH('')),1,1,'')	AS BRANCHIDS
FROM	dbo.MCGOOD AA WITH(NOLOCK)
INNER JOIN dbo.MCGOODVENDOR BB WITH(NOLOCK)
	ON	AA.GOOD_IDEN_NUMB = BB.GOOD_IDEN_NUMB
WHERE	BB.ISUSE = '1'
AND		AA.REPRE_GOOD != 'P'
GROUP BY AA.GOOD_NAME
;

-- SRC_CATEGORY (OK플라자 상품검색용 구매사카테고리)
CREATE VIEW dbo.SRC_CATEGORY
WITH SCHEMABINDING
AS 
SELECT A.CUST_CATE_CD         AS CUST_CATE_CD
     , B.CATE_ID              AS CATE_ID
  FROM dbo.MCCUST_CATE_NEW A      WITH(NOLOCK)
  LEFT JOIN dbo.MCCUST_CATE_NEW_CONN B WITH(NOLOCK)
    ON A.CUST_CATE_CD = SUBSTRING(B.CUST_CATE_CD, 1, 5)
 WHERE A.CATE_LEVEL   = 0
 UNION ALL
SELECT A.CUST_CATE_CD
     , B.CATE_ID
  FROM dbo.MCCUST_CATE_NEW A      WITH(NOLOCK)
  LEFT JOIN dbo.MCCUST_CATE_NEW_CONN B WITH(NOLOCK)
    ON A.CUST_CATE_CD = SUBSTRING(B.CUST_CATE_CD, 1, 7)
 WHERE A.CATE_LEVEL   = 1
 UNION ALL
SELECT A.CUST_CATE_CD
     , B.CATE_ID
  FROM dbo.MCCUST_CATE_NEW A      WITH(NOLOCK)
  LEFT JOIN dbo.MCCUST_CATE_NEW_CONN B WITH(NOLOCK)
    ON A.CUST_CATE_CD = SUBSTRING(B.CUST_CATE_CD, 1, 9)
 WHERE A.CATE_LEVEL   = 2
; 

-- SRC_BRANCH (OK플라자 상품검색용 조직)
-- DROP VIEW dbo.SRC_BRANCH 

CREATE VIEW dbo.SRC_BRANCH
WITH SCHEMABINDING
AS 
SELECT	A.GOOD_IDEN_NUMB
,		A.VENDORID
,		C.BRANCHID
FROM		dbo.MCGOODDISPLAY A WITH(NOLOCK)
INNER JOIN	dbo.MCGOODDISPLAY B WITH(NOLOCK)
	ON	A.GOOD_IDEN_NUMB = B.GOOD_IDEN_NUMB
	AND	A.VENDORID = B.VENDORID
	AND B.USE_YN = 'Y'
INNER JOIN	dbo.SMPBRANCHS C WITH(NOLOCK)
	ON	CASE A.DISPLAY_TYPE_CD WHEN '99' THEN C.AREATYPE ELSE A.DISPLAY_TYPE_CD END = C.AREATYPE
	AND CASE B.DISPLAY_TYPE_CD WHEN '0' THEN C.WORKID ELSE B.DISPLAY_TYPE_CD END = C.WORKID 
INNER JOIN	dbo.SMPBORGS D WITH(NOLOCK)
	ON	C.BRANCHID = D.BORGID
	,   dbo.MCGOODVENDOR E WITH(NOLOCK)
	,   dbo.SMPBORGS     F WITH(NOLOCK)
WHERE	A.GOOD_IDEN_NUMB = B.GOOD_IDEN_NUMB
AND		A.VENDORID = B.VENDORID
AND		A.DISPLAY_TYPE = '10'
AND		B.DISPLAY_TYPE = '20'
AND     A.GOOD_IDEN_NUMB = E.GOOD_IDEN_NUMB
AND		A.VENDORID = E.VENDORID
AND		A.VENDORID = F.BORGID
AND     D.ISUSE        = '1'
AND     E.ISUSE        = '1'
AND     F.ISUSE        = '1'
AND		CASE WHEN D.[JOIN] = 'HNS'
			 THEN (CASE WHEN
						NOT EXISTS(
						SELECT	1
						FROM	dbo.MCGOODDISPLAY ZZ WITH(NOLOCK)
						WHERE	ZZ.GOOD_IDEN_NUMB = A.GOOD_IDEN_NUMB
						AND		ZZ.VENDORID = B.VENDORID
						AND		ZZ.USE_YN =  'N'
						AND		ZZ.DISPLAY_TYPE_CD IN (
													SELECT	B.WORKID
													FROM	dbo.SMPWORKINFO B WITH(NOLOCK)
													INNER JOIN dbo.SMPCODES C WITH(NOLOCK)
														ON CONVERT(VARCHAR(10),B.WORKID,120) = C.CODEVAL1
													WHERE	B.IS_SKTS_MANAGE = '1'
													AND		B.ISUSE = '1'
													AND		C.CODETYPECD = 'HNS_PROD_DISPLAY'
													) 
									) THEN 1 ELSE 0 END
					) ELSE 1 END = 1
AND		CASE WHEN D.[JOIN] = 'SAF'
			 THEN (CASE WHEN
						NOT EXISTS(
						SELECT	1
						FROM	dbo.MCGOODDISPLAY ZZ WITH(NOLOCK)
						WHERE	ZZ.GOOD_IDEN_NUMB = A.GOOD_IDEN_NUMB
						AND		ZZ.VENDORID = B.VENDORID
						AND		ZZ.USE_YN =  'N'
						AND		ZZ.DISPLAY_TYPE_CD IN (
													SELECT	B.WORKID
													FROM	dbo.SMPWORKINFO B WITH(NOLOCK)
													INNER JOIN dbo.SMPCODES C WITH(NOLOCK)
														ON CONVERT(VARCHAR(10),B.WORKID,120) = C.CODEVAL1
													WHERE	B.IS_SKTS_MANAGE = '1'
													AND		B.ISUSE = '1'
													AND		C.CODETYPECD = 'SKB_PROD_DISPLAY'
													) 
									) THEN 1 ELSE 0 END
					) ELSE 1 END = 1
UNION
SELECT	A.GOOD_IDEN_NUMB
,		A.VENDORID
,		B.BRANCHID
FROM		dbo.MCGOODVENDOR A WITH(NOLOCK)
INNER JOIN	dbo.MCGOODDISPLAYBRANCH B WITH(NOLOCK)
	ON	A.GOOD_IDEN_NUMB = B.GOOD_IDEN_NUMB
	AND	A.VENDORID = B.VENDORID
	AND B.USE_YN = 'Y'
INNER JOIN	dbo.SMPBORGS C WITH(NOLOCK)
	ON B.BRANCHID = C.BORGID
INNER JOIN	dbo.SMPBRANCHS D WITH(NOLOCK)
	ON C.BORGID = D.BRANCHID
WHERE	A.ISUSE = '1'
  AND   C.ISUSE = '1'
;


-- dbo.SRC_GOODS source
CREATE VIEW dbo.SRC_GOODS
WITH SCHEMABINDING
AS
WITH GOODS AS (
SELECT A.GOOD_IDEN_NUMB
     , B.VENDORID
     , A.CATE_ID
     , A.GOOD_NAME
     , A.GOOD_SPEC

     , ISNULL(A.ADD_GOOD,'N')       AS ADD_GOOD
     , A.REPRE_GOOD
     , ISNULL(A.VENDOR_EXPOSE,'Y')  AS VENDOR_EXPOSE
     , A.GOOD_TYPE
     , ISNULL(E.CODENM1, '')        AS GOOD_TYPE_NM

     , ISNULL(E.CODEVAL2, '')       AS GOOD_TYPE_CLASS
     , ISNULL(B.ORDER_CNT,0)        AS ORDER_CNT
     , A.INSERT_DATE
      ,      CASE
            WHEN ISNULL(A.STOCK_YN, 'N') = 'Y'
            THEN (
               CASE
                  WHEN A.VENDOR_EXPOSE = 'Y'
                  THEN (
                     SELECT   CONVERT(VARCHAR, ISNULL(SUM(GOOD_QUAN), 0))
                     FROM   dbo.LOGI_INFO WITH(NOLOCK)
                     WHERE   GOOD_IDEN_NUMB = B.GOOD_IDEN_NUMB
                     AND      VENDORID = B.VENDORID
                     AND      ENTER_STATE = '9'
                  )
                  ELSE (
                     SELECT   CONVERT(VARCHAR, ISNULL(SUM(GOOD_QUAN), 0))
                     FROM   dbo.LOGI_INFO WITH(NOLOCK)
                     WHERE   GOOD_IDEN_NUMB = B.GOOD_IDEN_NUMB
                     AND      ENTER_STATE = '9'
                  )
               END
            )
            WHEN ISNULL(A.REPRE_GOOD,'N') = 'Y'
            THEN (
               SELECT   CONVERT(VARCHAR, SUM(Y.GOOD_INVENTORY_CNT))
               FROM   dbo.MCGOOD X WITH(NOLOCK)
               INNER JOIN dbo.MCGOODVENDOR   Y WITH(NOLOCK)
               ON      X.GOOD_IDEN_NUMB = Y.GOOD_IDEN_NUMB
               WHERE   X.REPRE_GOOD_IDEN_NUMB = A.GOOD_IDEN_NUMB 
               AND      Y.VENDORID = B.VENDORID
            )
            ELSE (
               CASE
                  WHEN ISNULL(B.VENDOR_STOCK_YN,'N') = 'Y' AND B.GOOD_INVENTORY_CNT > 0
                  THEN (
                        CASE
                           WHEN A.VENDOR_EXPOSE = 'N'
                           THEN (
                              SELECT   CONVERT(VARCHAR, ISNULL(SUM(GOOD_INVENTORY_CNT), 0))
                              FROM   dbo.MCGOODVENDOR WITH(NOLOCK)
                              WHERE   GOOD_IDEN_NUMB = A.GOOD_IDEN_NUMB
                           )
                           WHEN A.VENDOR_EXPOSE = 'Y'
                           THEN CONVERT(VARCHAR, ISNULL(B.GOOD_INVENTORY_CNT, 0))
                           ELSE '0'
                        END
                  )
                  ELSE ''
               END
            )
         END                                          AS good_inventory_cnt
     , CONVERT(TINYINT, ROW_NUMBER() OVER(PARTITION BY B.GOOD_IDEN_NUMB ORDER BY B.SELL_PRICE ASC, F.APP_DATE ASC, B.VENDORID ASC)) AS RANK
     , COUNT(1) OVER(PARTITION BY B.GOOD_IDEN_NUMB) AS VENDOR_CNT
     , IIF(A.SKTS_IMG = 'Y', A.SKTS_ORIGNAL_IMG_PATH, B.ORIGINAL_IMG_PATH) AS IMG_PATH
     , IIF(A.VENDOR_EXPOSE = 'N', '오케이플라자', C.VENDORNM) AS VENDORNM
     , B.DELI_MINI_DAY
     , B.DELI_MINI_QUAN

     , B.MAKE_COMP_NAME
     , B.SELL_PRICE
     , A.ORDER_UNIT
     , A.ISDISTRIBUTE
     , IIF(ASCII(SUBSTRING(A.GOOD_NAME, 1,1)) < 128, 2, 1) AS ASCII_ORDER

     , B.GOOD_SAME_WORD
     , ISNULL(A.STOCK_YN, 'N')      AS STOCK_YN
     , ISNULL(A.JOJANG_YN, 'N')     AS JOJANG_YN
     , B.VENDOR_STOCK_YN
     , A.GOOD_TEXT_DESC

  FROM dbo.MCGOOD          A WITH(NOLOCK)
     , dbo.MCGOODVENDOR    B WITH(NOLOCK)
  LEFT JOIN (SELECT   MAX(APP_DATE) AS APP_DATE
             , GOOD_IDEN_NUMB
             , VENDORID
          FROM dbo.MCGOODFIX WITH(NOLOCK)
         WHERE APPLT_FIX_CODE = '20'
           AND FIX_APP_STS = '2'
         GROUP BY GOOD_IDEN_NUMB, VENDORID) F
    ON B.GOOD_IDEN_NUMB = F.GOOD_IDEN_NUMB
   AND B.VENDORID   = F.VENDORID
     , dbo.SMPVENDORS      C WITH(NOLOCK)
     , dbo.SMPBORGS        D WITH(NOLOCK)
  , dbo.SMPCODES        E WITH(NOLOCK)
 WHERE A.REPRE_GOOD IN ('Y','N')
   AND A.GOOD_IDEN_NUMB = B.GOOD_IDEN_NUMB
   AND B.ISUSE      = 1
   AND B.VENDORID NOT IN ( 
            SELECT   VENDORID 
            FROM   dbo.MCGOODFIX WITH(NOLOCK) 
            WHERE   GOOD_IDEN_NUMB = A.GOOD_IDEN_NUMB
            AND      FIX_APP_STS = '0'
      )
   AND B.VENDORID   = C.VENDORID
   AND C.VENDORID   = D.BORGID
   AND D.ISUSE      = '1'
   AND A.AGENT_ID   = 13
   AND E.CODETYPECD = 'ORDERGOODSTYPE'
   AND A.GOOD_TYPE  = E.CODEVAL1
   AND A.AGENT_ID   = E.AGENT_ID
   AND NOT EXISTS (
      SELECT 1
        FROM dbo.MCADDGOOD Z WITH(NOLOCK)
       WHERE Z.ADD_GOOD_IDEN_NUMB = A.GOOD_IDEN_NUMB
      )
)
SELECT GOOD_IDEN_NUMB
     , VENDORID
     , CATE_ID
     , GOOD_NAME
     , GOOD_SPEC

     , ADD_GOOD
     , REPRE_GOOD
     , VENDOR_EXPOSE
     , GOOD_TYPE
     , GOOD_TYPE_NM

     , GOOD_TYPE_CLASS
     , ORDER_CNT
     , INSERT_DATE
     , GOOD_INVENTORY_CNT
     , [RANK]

     , VENDOR_CNT
     , IMG_PATH
     , VENDORNM
     , DELI_MINI_DAY
     , DELI_MINI_QUAN

     , MAKE_COMP_NAME
     , SELL_PRICE
     , ORDER_UNIT
     , ISDISTRIBUTE
     , ASCII_ORDER

     , (
          SELECT STUFF((
              SELECT ',' + CAST(X.GOOD_IDEN_NUMB AS VARCHAR(MAX))
              FROM dbo.MCGOOD X
              WHERE X.REPRE_GOOD_IDEN_NUMB = A.GOOD_IDEN_NUMB
              FOR XML PATH(''), TYPE
          ).value('.', 'VARCHAR(MAX)'), 1, 1, '')
      ) AS OPT_GOOD_IDEN_NUMBS
     , GOOD_SAME_WORD
     , STOCK_YN
     , JOJANG_YN
     , VENDOR_STOCK_YN
     , GOOD_TEXT_DESC
     , (
          SELECT STUFF((
              SELECT ',' + X.CUST_CATE_CD
              FROM dbo.SRC_CATEGORY X WITH(NOLOCK)
              WHERE X.CATE_ID = A.CATE_ID
              FOR XML PATH(''), TYPE
          ).value('.', 'VARCHAR(MAX)'), 1, 1, '')
      ) AS CUST_CATE_CDS
     , (
          SELECT STUFF((
              SELECT ',' + CAST(X.BRANCHID AS VARCHAR(MAX))
              FROM dbo.SRC_BRANCH X WITH(NOLOCK)
              WHERE X.GOOD_IDEN_NUMB = A.GOOD_IDEN_NUMB
                AND X.VENDORID = A.VENDORID
              FOR XML PATH(''), TYPE).value('.', 'VARCHAR(MAX)'), 1, 1, '')
      ) AS BRANCHIDS
  FROM GOODS A
 WHERE A.RANK = 1
 UNION ALL
SELECT GOOD_IDEN_NUMB
     , VENDORID
     , CATE_ID
     , GOOD_NAME
     , GOOD_SPEC

     , ADD_GOOD
     , REPRE_GOOD
     , VENDOR_EXPOSE
     , GOOD_TYPE
     , GOOD_TYPE_NM

     , GOOD_TYPE_CLASS
     , ORDER_CNT
     , INSERT_DATE
     , GOOD_INVENTORY_CNT
     , [RANK] + 1 AS RANK

     , VENDOR_CNT
     , IMG_PATH
     , VENDORNM
     , DELI_MINI_DAY
     , DELI_MINI_QUAN

     , MAKE_COMP_NAME
     , SELL_PRICE
     , ORDER_UNIT
     , ISDISTRIBUTE
     , ASCII_ORDER

     , NULL 
     , GOOD_SAME_WORD
     , STOCK_YN
     , JOJANG_YN
     , VENDOR_STOCK_YN
     , GOOD_TEXT_DESC
     , NULL
     , (
          SELECT STUFF((
              SELECT ',' + CAST(X.BRANCHID AS VARCHAR(MAX))
              FROM dbo.SRC_BRANCH X WITH(NOLOCK)
              WHERE X.GOOD_IDEN_NUMB = A.GOOD_IDEN_NUMB
                AND X.VENDORID = A.VENDORID
              FOR XML PATH(''), TYPE
          ).value('.', 'VARCHAR(MAX)'), 1, 1, '')
      ) AS BRANCHIDS
  FROM GOODS A
;

-- dbo.SRC_GOODS_PANTA source
CREATE VIEW dbo.SRC_GOODS_PANTA
WITH SCHEMABINDING
AS 
SELECT GOOD_IDEN_NUMB
     , CATE_ID
     , GOOD_NAME
     , GOOD_SPEC
     , ADD_GOOD
     
     , REPRE_GOOD
     , ORDER_CNT
     , INSERT_DATE
     , IMG_PATH
     , DELI_MINI_QUAN
     
     , VENDORID 
     , VENDORNM
     , MAKE_COMP_NAME
     , ORI_SELL_PRICE
     , SELL_PRICE
    
    , SALE_RATE
    , FREE_DELI_YN
     , ORDER_UNIT
     , GOOD_DESC
     , ASCII_ORDER
     
     , OPT_GOOD_IDEN_NUMBS
     , GOOD_SAME_WORD
     , STOCK_YN
     , JOJANG_YN
     , CUST_CATE_CDS
  FROM (
   SELECT A.GOOD_IDEN_NUMB
        , A.CATE_ID
        , A.GOOD_NAME
        , A.GOOD_SPEC
        , ISNULL(A.ADD_GOOD,'N')       AS ADD_GOOD
        
        , A.REPRE_GOOD
        , ISNULL(B.ORDER_CNT,0)        AS ORDER_CNT
        , A.INSERT_DATE
        , IIF(A.SKTS_IMG = 'Y', A.SKTS_ORIGNAL_IMG_PATH, B.ORIGINAL_IMG_PATH) AS IMG_PATH
        , B.DELI_MINI_QUAN
        
        , IIF(A.STOCK_YN = 'Y', '0', B.VENDORID) AS VENDORID
        , IIF(A.STOCK_YN = 'Y', '오케이플라자', C.VENDORNM) AS VENDORNM
        , B.MAKE_COMP_NAME
        , D.ORI_SELL_PRICE
        , D.SELL_PRICE

         , ISNULL(ROUND((1 - (D.SELL_PRICE / NULLIF(D.ORI_SELL_PRICE, 0))) * 100, 2),0) AS SALE_RATE
       , F.FREE_DELI_YN
        , A.ORDER_UNIT
        , B.GOOD_DESC
        , IIF(ASCII(SUBSTRING(A.GOOD_NAME, 1,1)) < 128, 2, 1) AS ASCII_ORDER
        
         , (
             SELECT STUFF((
                 SELECT ',' + CAST(X.GOOD_IDEN_NUMB AS VARCHAR(MAX))
                 FROM dbo.MCGOOD X
                 WHERE X.REPRE_GOOD_IDEN_NUMB = A.GOOD_IDEN_NUMB
                 FOR XML PATH(''), TYPE
             ).value('.', 'VARCHAR(MAX)'), 1, 1, '')
         ) AS OPT_GOOD_IDEN_NUMBS
         , B.GOOD_SAME_WORD AS GOOD_SAME_WORD
        , ISNULL(A.STOCK_YN, 'N')      AS STOCK_YN
        , ISNULL(A.JOJANG_YN, 'N')     AS JOJANG_YN
        , (
             SELECT STUFF((
                 SELECT ',' + X.CUST_CATE_CD
                 FROM dbo.SRC_CATEGORY X WITH(NOLOCK)
                 WHERE X.CATE_ID = A.CATE_ID
                 FOR XML PATH(''), TYPE
             ).value('.', 'VARCHAR(MAX)'), 1, 1, '')
         ) AS CUST_CATE_CDS
        , ROW_NUMBER() OVER (PARTITION BY A.GOOD_IDEN_NUMB, IIF(A.STOCK_YN = 'Y', '0', B.VENDORID) ORDER BY D.SELL_PRICE ASC)   AS RANK
     FROM dbo.MCGOOD                  A WITH(NOLOCK)
        , dbo.MCGOODVENDOR            B WITH(NOLOCK)
         , dbo.SMPVENDORS              C WITH(NOLOCK)
        , dbo.MCGOODVENDOR_PANTA      D WITH(NOLOCK)
        , dbo.SMPVENDORS_PANTA        F WITH(NOLOCK)
    WHERE A.GOOD_IDEN_NUMB = B.GOOD_IDEN_NUMB
      AND B.VENDORID       = C.VENDORID
      AND B.ISUSE      = 1
      AND B.VENDORID NOT IN ( 
                     SELECT   VENDORID 
                     FROM   dbo.MCGOODFIX WITH(NOLOCK) 
                     WHERE   GOOD_IDEN_NUMB = A.GOOD_IDEN_NUMB
                     AND      FIX_APP_STS = '0'
               )
       AND B.VENDORID       = D.VENDORID
       AND (
         CASE
            WHEN A.STOCK_YN = 'Y'
            THEN 'Y'
            ELSE C.PANTA_YN 
         END
      )               = 'Y'
      AND A.GOOD_IDEN_NUMB = D.GOOD_IDEN_NUMB
      AND (A.ADD_GOOD = 'N'  OR A.ADD_GOOD IS NULL)
      AND (A.JOJANG_YN = 'N' OR A.JOJANG_YN IS NULL)
      AND A.REPRE_GOOD    IN ('Y','N')
      AND D.SELL_PRICE    >= 0
      AND A.AGENT_ID       = '13'
      AND F.VENDORID      = (
                            CASE
                               WHEN A.STOCK_YN = 'Y'
                               THEN '13'
                               ELSE D.VENDORID
                            END
                         )
      AND NOT EXISTS (
         SELECT 1
           FROM dbo.MCADDGOOD Z WITH(NOLOCK)
          WHERE Z.ADD_GOOD_IDEN_NUMB = A.GOOD_IDEN_NUMB
         )
      AND EXISTS (
         SELECT 1
           FROM dbo.MCGOODDISPLAY X WITH(NOLOCK)
          WHERE X.GOOD_IDEN_NUMB = A.GOOD_IDEN_NUMB
            AND X.VENDORID = B.VENDORID
 AND X.DISPLAY_TYPE = '20'
               AND X.DISPLAY_TYPE_CD = '1'
         UNION ALL
         SELECT 1
           FROM dbo.MCGOODDISPLAYBRANCH X WITH(NOLOCK)
          WHERE   X.GOOD_IDEN_NUMB = A.GOOD_IDEN_NUMB
            AND X.VENDORID = B.VENDORID
            AND X.BRANCHID = 'PTO000002'
            )
      )  A
 WHERE RANK = 1;
         
-- SRC_GOODS_TRIG (검색엔진용 트리거)
CREATE TABLE dbo.SRC_GOODS_TRIG (
	SEQ int IDENTITY(1,1) NOT NULL,
	GOOD_IDEN_NUMB bigint NOT NULL,
	TABLE_NAME varchar(30) COLLATE Korean_Wansung_CI_AS NULL,
	[ACTION] varchar(1) COLLATE Korean_Wansung_CI_AS NULL,
	INSERTDATE datetime NULL,
	STATUS varchar(100) COLLATE Korean_Wansung_CI_AS DEFAULT 'N' NULL,
	CONSTRAINT PK__SRC_GOODS_TRIG PRIMARY KEY (SEQ)
);



-------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- 트리거
-- 기존 트리거 삭제 후 진행
SELECT * FROM SRC_GOODS_TRIG order by insertdate desc;
--INSERT SRC_GOODS_TRIG VALUES (1, 1, 'MCADDGOOD', 'I', GET  )

/*
실서버 트리거
1. MCADDGOOD > 추가구성상품 추가
2. MCGOOD > 상품마스터
3. MCGOOD_HNS_APP > HNS 상품 승인 테이블 
4. MCGOODAPP > 상품가격변경승인
5. MCGOODDISPLAY > 상품진열
6. MCGOODDISPLAYBRANCH > 상품진열사업장
7. MCGOODVENDOR > 상품공급사

추가 트리거 대상 테이블
1. MCGOODVENDOR_PANTA > 상품공급사_팬타온
   ㄴ 판매가 변경 시 필요
2. SMPVENDORS_PANTA > 공급사_팬타온
   ㄴ 배송비 정책관련 변경 시 필요
3. SMPVENDORS > 공급사
   ㄴ 팬타온 판매여부 YN 변경 시 필요
   ㄴㄴ 운영사 수정 후 확인
*/

-- 1. MCADDGOOD > 추가구성상품 추가
CREATE TRIGGER TRG_MCADDGOOD
ON MCADDGOOD
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
	SET NOCOUNT ON;

	-- INSERT 처리
	INSERT INTO SRC_GOODS_TRIG (GOOD_IDEN_NUMB, TABLE_NAME, [ACTION], INSERTDATE, STATUS)
	SELECT
		i.GOOD_IDEN_NUMB,
		'SRC_GOODS',
		'I',
		GETDATE(),
		'N'
	FROM inserted i
	LEFT JOIN deleted d ON i.GOOD_IDEN_NUMB = d.GOOD_IDEN_NUMB
	WHERE d.GOOD_IDEN_NUMB IS NULL;

	-- UPDATE 처리
	INSERT INTO SRC_GOODS_TRIG (GOOD_IDEN_NUMB, TABLE_NAME, [ACTION], INSERTDATE, STATUS)
	SELECT
		i.GOOD_IDEN_NUMB,
		'SRC_GOODS',
		'U',
		GETDATE(),
		'N'
	FROM inserted i
	JOIN deleted d ON i.GOOD_IDEN_NUMB = d.GOOD_IDEN_NUMB;

	-- DELETE 처리
	INSERT INTO SRC_GOODS_TRIG (GOOD_IDEN_NUMB, TABLE_NAME, [ACTION], INSERTDATE, STATUS)
	SELECT
		d.GOOD_IDEN_NUMB,
		'SRC_GOODS',
		'D',
		GETDATE(),
		'N'
	FROM deleted d
	LEFT JOIN inserted i ON d.GOOD_IDEN_NUMB = i.GOOD_IDEN_NUMB
	WHERE i.GOOD_IDEN_NUMB IS NULL;
END;


-- 2. MCGOOD > 상품마스터
-- 이따가 할것
CREATE TRIGGER TRG_MCGOOD
ON MCGOOD
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
	SET NOCOUNT ON;

	-- INSERT 처리
	INSERT INTO SRC_GOODS_TRIG (GOOD_IDEN_NUMB, TABLE_NAME, [ACTION], INSERTDATE, STATUS)
	SELECT
		i.GOOD_IDEN_NUMB,
		v.TABLE_NAME,
		'I',
		GETDATE(),
		'N'
	FROM inserted i
	CROSS APPLY (SELECT 'SRC_GOODS' AS TABLE_NAME UNION ALL SELECT 'SRC_GOODS_PANTA') v
	LEFT JOIN deleted d ON i.GOOD_IDEN_NUMB = d.GOOD_IDEN_NUMB
	WHERE d.GOOD_IDEN_NUMB IS NULL;

	-- UPDATE 처리
	INSERT INTO SRC_GOODS_TRIG (GOOD_IDEN_NUMB, TABLE_NAME, [ACTION], INSERTDATE, STATUS)
	SELECT
		i.GOOD_IDEN_NUMB,
		v.TABLE_NAME,
		'U',
		GETDATE(),
		'N'
	FROM inserted i
	JOIN deleted d ON i.GOOD_IDEN_NUMB = d.GOOD_IDEN_NUMB
	CROSS APPLY (SELECT 'SRC_GOODS' AS TABLE_NAME UNION ALL SELECT 'SRC_GOODS_PANTA') v;

	-- DELETE 처리
	INSERT INTO SRC_GOODS_TRIG (GOOD_IDEN_NUMB, TABLE_NAME, [ACTION], INSERTDATE, STATUS)
	SELECT
		d.GOOD_IDEN_NUMB,
		v.TABLE_NAME,
		'D',
		GETDATE(),
		'N'
	FROM deleted d
	CROSS APPLY (SELECT 'SRC_GOODS' AS TABLE_NAME UNION ALL SELECT 'SRC_GOODS_PANTA') v
	LEFT JOIN inserted i ON d.GOOD_IDEN_NUMB = i.GOOD_IDEN_NUMB
	WHERE i.GOOD_IDEN_NUMB IS NULL;
END;


-- 3. MCGOOD_HNS_APP > HNS 상품 승인 테이블 
CREATE TRIGGER TRG_MCGOOD_HNS_APP
ON MCGOOD_HNS_APP
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
	SET NOCOUNT ON;

	-- INSERT 처리
	INSERT INTO SRC_GOODS_TRIG (GOOD_IDEN_NUMB, TABLE_NAME, [ACTION], INSERTDATE, STATUS)
	SELECT
		i.GOOD_IDEN_NUMB,
		v.TABLE_NAME,
		'I',
		GETDATE(),
		'N'
	FROM inserted i
	CROSS APPLY (SELECT 'SRC_GOODS' AS TABLE_NAME UNION ALL SELECT 'SRC_GOODS_PANTA') v
	LEFT JOIN deleted d ON i.GOOD_IDEN_NUMB = d.GOOD_IDEN_NUMB
	WHERE d.GOOD_IDEN_NUMB IS NULL;

	-- UPDATE 처리
	INSERT INTO SRC_GOODS_TRIG (GOOD_IDEN_NUMB, TABLE_NAME, [ACTION], INSERTDATE, STATUS)
	SELECT
		i.GOOD_IDEN_NUMB,
		v.TABLE_NAME,
		'U',
		GETDATE(),
		'N'
	FROM inserted i
	JOIN deleted d ON i.GOOD_IDEN_NUMB = d.GOOD_IDEN_NUMB
	CROSS APPLY (SELECT 'SRC_GOODS' AS TABLE_NAME UNION ALL SELECT 'SRC_GOODS_PANTA') v;

	-- DELETE 처리
	INSERT INTO SRC_GOODS_TRIG (GOOD_IDEN_NUMB, TABLE_NAME, [ACTION], INSERTDATE, STATUS)
	SELECT
		d.GOOD_IDEN_NUMB,
		v.TABLE_NAME,
		'D',
		GETDATE(),
		'N'
	FROM deleted d
	CROSS APPLY (SELECT 'SRC_GOODS' AS TABLE_NAME UNION ALL SELECT 'SRC_GOODS_PANTA') v
	LEFT JOIN inserted i ON d.GOOD_IDEN_NUMB = i.GOOD_IDEN_NUMB
	WHERE i.GOOD_IDEN_NUMB IS NULL;
END;


-- 4. MCGOODAPP > 상품가격변경승인
CREATE TRIGGER TRG_MCGOODAPP
ON MCGOODAPP
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
	SET NOCOUNT ON;

	-- INSERT 처리
	INSERT INTO SRC_GOODS_TRIG (GOOD_IDEN_NUMB, TABLE_NAME, [ACTION], INSERTDATE, STATUS)
	SELECT
		i.GOOD_IDEN_NUMB,
		v.TABLE_NAME,
		'I',
		GETDATE(),
		'N'
	FROM inserted i
	CROSS APPLY (SELECT 'SRC_GOODS' AS TABLE_NAME UNION ALL SELECT 'SRC_GOODS_PANTA') v
	LEFT JOIN deleted d ON i.GOOD_IDEN_NUMB = d.GOOD_IDEN_NUMB
	WHERE d.GOOD_IDEN_NUMB IS NULL;

	-- UPDATE 처리
	INSERT INTO SRC_GOODS_TRIG (GOOD_IDEN_NUMB, TABLE_NAME, [ACTION], INSERTDATE, STATUS)
	SELECT
		i.GOOD_IDEN_NUMB,
		v.TABLE_NAME,
		'U',
		GETDATE(),
		'N'
	FROM inserted i
	JOIN deleted d ON i.GOOD_IDEN_NUMB = d.GOOD_IDEN_NUMB
	CROSS APPLY (SELECT 'SRC_GOODS' AS TABLE_NAME UNION ALL SELECT 'SRC_GOODS_PANTA') v;

	-- DELETE 처리
	INSERT INTO SRC_GOODS_TRIG (GOOD_IDEN_NUMB, TABLE_NAME, [ACTION], INSERTDATE, STATUS)
	SELECT
		d.GOOD_IDEN_NUMB,
		v.TABLE_NAME,
		'D',
		GETDATE(),
		'N'
	FROM deleted d
	CROSS APPLY (SELECT 'SRC_GOODS' AS TABLE_NAME UNION ALL SELECT 'SRC_GOODS_PANTA') v
	LEFT JOIN inserted i ON d.GOOD_IDEN_NUMB = i.GOOD_IDEN_NUMB
	WHERE i.GOOD_IDEN_NUMB IS NULL;
END;


-- 5. MCGOODDISPLAY > 상품진열
CREATE TRIGGER TRG_MCGOODDISPLAY
ON MCGOODDISPLAY
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
	SET NOCOUNT ON;

	-- INSERT 처리
	INSERT INTO SRC_GOODS_TRIG (GOOD_IDEN_NUMB, TABLE_NAME, [ACTION], INSERTDATE, STATUS)
	SELECT
		i.GOOD_IDEN_NUMB,
		v.TABLE_NAME,
		'I',
		GETDATE(),
		'N'
	FROM inserted i
	CROSS APPLY (SELECT 'SRC_GOODS' AS TABLE_NAME UNION ALL SELECT 'SRC_GOODS_PANTA') v
	LEFT JOIN deleted d ON i.GOOD_IDEN_NUMB = d.GOOD_IDEN_NUMB
	WHERE d.GOOD_IDEN_NUMB IS NULL;

	-- UPDATE 처리
	INSERT INTO SRC_GOODS_TRIG (GOOD_IDEN_NUMB, TABLE_NAME, [ACTION], INSERTDATE, STATUS)
	SELECT
		i.GOOD_IDEN_NUMB,
		v.TABLE_NAME,
		'U',
		GETDATE(),
		'N'
	FROM inserted i
	JOIN deleted d ON i.GOOD_IDEN_NUMB = d.GOOD_IDEN_NUMB
	CROSS APPLY (SELECT 'SRC_GOODS' AS TABLE_NAME UNION ALL SELECT 'SRC_GOODS_PANTA') v;

	-- DELETE 처리
	INSERT INTO SRC_GOODS_TRIG (GOOD_IDEN_NUMB, TABLE_NAME, [ACTION], INSERTDATE, STATUS)
	SELECT
		d.GOOD_IDEN_NUMB,
		v.TABLE_NAME,
		'D',
		GETDATE(),
		'N'
	FROM deleted d
	CROSS APPLY (SELECT 'SRC_GOODS' AS TABLE_NAME UNION ALL SELECT 'SRC_GOODS_PANTA') v
	LEFT JOIN inserted i ON d.GOOD_IDEN_NUMB = i.GOOD_IDEN_NUMB
	WHERE i.GOOD_IDEN_NUMB IS NULL;
END;


-- 6. MCGOODDISPLAYBRANCH > 상품진열사업장
CREATE TRIGGER TRG_MCGOODDISPLAYBRANCH
ON MCGOODDISPLAYBRANCH
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
	SET NOCOUNT ON;

	-- INSERT 처리
	INSERT INTO SRC_GOODS_TRIG (GOOD_IDEN_NUMB, TABLE_NAME, [ACTION], INSERTDATE, STATUS)
	SELECT
		i.GOOD_IDEN_NUMB,
		v.TABLE_NAME,
		'I',
		GETDATE(),
		'N'
	FROM inserted i
	CROSS APPLY (SELECT 'SRC_GOODS' AS TABLE_NAME UNION ALL SELECT 'SRC_GOODS_PANTA') v
	LEFT JOIN deleted d ON i.GOOD_IDEN_NUMB = d.GOOD_IDEN_NUMB
	WHERE d.GOOD_IDEN_NUMB IS NULL;

	-- UPDATE 처리
	INSERT INTO SRC_GOODS_TRIG (GOOD_IDEN_NUMB, TABLE_NAME, [ACTION], INSERTDATE, STATUS)
	SELECT
		i.GOOD_IDEN_NUMB,
		v.TABLE_NAME,
		'U',
		GETDATE(),
		'N'
	FROM inserted i
	JOIN deleted d ON i.GOOD_IDEN_NUMB = d.GOOD_IDEN_NUMB
	CROSS APPLY (SELECT 'SRC_GOODS' AS TABLE_NAME UNION ALL SELECT 'SRC_GOODS_PANTA') v;

	-- DELETE 처리
	INSERT INTO SRC_GOODS_TRIG (GOOD_IDEN_NUMB, TABLE_NAME, [ACTION], INSERTDATE, STATUS)
	SELECT
		d.GOOD_IDEN_NUMB,
		v.TABLE_NAME,
		'D',
		GETDATE(),
		'N'
	FROM deleted d
	CROSS APPLY (SELECT 'SRC_GOODS' AS TABLE_NAME UNION ALL SELECT 'SRC_GOODS_PANTA') v
	LEFT JOIN inserted i ON d.GOOD_IDEN_NUMB = i.GOOD_IDEN_NUMB
	WHERE i.GOOD_IDEN_NUMB IS NULL;
END;


--drop TRIGGER TRG_MCGOODVENDOR;
-- 7. MCGOODVENDOR > 상품공급사
CREATE TRIGGER TRG_MCGOODVENDOR
ON MCGOODVENDOR
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
	SET NOCOUNT ON;

	-- INSERT 처리
	INSERT INTO SRC_GOODS_TRIG (GOOD_IDEN_NUMB, TABLE_NAME, [ACTION], INSERTDATE, STATUS)
	SELECT
		i.GOOD_IDEN_NUMB,
		'SRC_GOODS',
		'I',
		GETDATE(),
		'N'
	FROM inserted i
	LEFT JOIN deleted d ON i.GOOD_IDEN_NUMB = d.GOOD_IDEN_NUMB
	WHERE d.GOOD_IDEN_NUMB IS NULL;

	-- PANTA용 추가 INSERT
	INSERT INTO SRC_GOODS_TRIG (GOOD_IDEN_NUMB, TABLE_NAME, [ACTION], INSERTDATE, STATUS)
	SELECT
		i.GOOD_IDEN_NUMB,
		'SRC_GOODS_PANTA',
		'I',
		GETDATE(),
		'N'
	FROM inserted i
	LEFT JOIN deleted d ON i.GOOD_IDEN_NUMB = d.GOOD_IDEN_NUMB
	WHERE d.GOOD_IDEN_NUMB IS NULL AND i.PANTA_DISP_YN = 'Y';

	-- UPDATE 처리
	INSERT INTO SRC_GOODS_TRIG (GOOD_IDEN_NUMB, TABLE_NAME, [ACTION], INSERTDATE, STATUS)
	SELECT
		i.GOOD_IDEN_NUMB,
		'SRC_GOODS',
		'U',
		GETDATE(),
		'N'
	FROM inserted i
	JOIN deleted d ON i.GOOD_IDEN_NUMB = d.GOOD_IDEN_NUMB
	WHERE EXISTS (
		SELECT i.GOOD_IDEN_NUMB
		INTERSECT
		SELECT d.GOOD_IDEN_NUMB
	);

	-- PANTA용 추가 UPDATE
	INSERT INTO SRC_GOODS_TRIG (GOOD_IDEN_NUMB, TABLE_NAME, [ACTION], INSERTDATE, STATUS)
	SELECT
		i.GOOD_IDEN_NUMB,
		'SRC_GOODS_PANTA',
		'U',
		GETDATE(),
		'N'
	FROM inserted i
	JOIN deleted d ON i.GOOD_IDEN_NUMB = d.GOOD_IDEN_NUMB
	WHERE i.PANTA_DISP_YN = 'Y'
	AND EXISTS (
		SELECT i.GOOD_IDEN_NUMB
		INTERSECT
		SELECT d.GOOD_IDEN_NUMB
	);

	-- DELETE 처리
	INSERT INTO SRC_GOODS_TRIG (GOOD_IDEN_NUMB, TABLE_NAME, [ACTION], INSERTDATE, STATUS)
	SELECT
		d.GOOD_IDEN_NUMB,
		'SRC_GOODS',
		'D',
		GETDATE(),
		'N'
	FROM deleted d
	LEFT JOIN inserted i ON d.GOOD_IDEN_NUMB = i.GOOD_IDEN_NUMB
	WHERE i.GOOD_IDEN_NUMB IS NULL;

	-- PANTA용 추가 DELETE
	INSERT INTO SRC_GOODS_TRIG (GOOD_IDEN_NUMB, TABLE_NAME, [ACTION], INSERTDATE, STATUS)
	SELECT
		d.GOOD_IDEN_NUMB,
		'SRC_GOODS_PANTA',
		'D',
		GETDATE(),
		'N'
	FROM deleted d
	LEFT JOIN inserted i ON d.GOOD_IDEN_NUMB = i.GOOD_IDEN_NUMB
	WHERE i.GOOD_IDEN_NUMB IS NULL AND d.PANTA_DISP_YN = 'Y';
END;


-- MCGOODVENDOR_PANTA > 상품공급사_팬타온
CREATE TRIGGER TRG_MCGOODVENDOR_PANTA
ON dbo.MCGOODVENDOR_PANTA
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
    SET NOCOUNT ON;

    -- INSERT 처리 (INSERTED 테이블에만 값이 있는 경우)
    INSERT INTO dbo.SRC_GOODS_TRIG (GOOD_IDEN_NUMB, TABLE_NAME, [ACTION], INSERTDATE, STATUS)
    SELECT 
        i.GOOD_IDEN_NUMB,  
        'SRC_GOODS_PANTA',
        'I',
        GETDATE(),
        'N'
    FROM inserted i
    LEFT JOIN deleted d ON i.GOOD_IDEN_NUMB = d.GOOD_IDEN_NUMB
    WHERE d.GOOD_IDEN_NUMB IS NULL;  -- 기존 데이터가 없으면 INSERT

    -- UPDATE 처리 (INSERTED와 DELETED 테이블에 값이 모두 있는 경우)
    INSERT INTO dbo.SRC_GOODS_TRIG (GOOD_IDEN_NUMB, TABLE_NAME, [ACTION], INSERTDATE, STATUS)
    SELECT 
        i.GOOD_IDEN_NUMB,  
        'SRC_GOODS_PANTA',
        'U',
        GETDATE(),
        'N'
    FROM inserted i
    INNER JOIN deleted d ON i.GOOD_IDEN_NUMB = d.GOOD_IDEN_NUMB;  -- 기존 데이터가 있으면 UPDATE

    -- DELETE 처리 (DELETED 테이블에만 값이 있는 경우)
    INSERT INTO dbo.SRC_GOODS_TRIG (GOOD_IDEN_NUMB, TABLE_NAME, [ACTION], INSERTDATE, STATUS)
    SELECT 
        d.GOOD_IDEN_NUMB,  
        'SRC_GOODS_PANTA',
        'D',
        GETDATE(),
        'N'
    FROM deleted d
    LEFT JOIN inserted i ON d.GOOD_IDEN_NUMB = i.GOOD_IDEN_NUMB
    WHERE i.GOOD_IDEN_NUMB IS NULL;  -- 새로운 데이터가 없으면 DELETE
END;

-- SMPVENDORS_PANTA > 공급사_팬타온
CREATE TRIGGER TRG_SMPVENDORS_PANTA
ON dbo.SMPVENDORS_PANTA
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;
	-- 팬타온 전시여부 상품만 업데이트처리
    INSERT INTO dbo.SRC_GOODS_TRIG (GOOD_IDEN_NUMB, TABLE_NAME, [ACTION], INSERTDATE, STATUS)
    SELECT 
        mg.GOOD_IDEN_NUMB,  
        'SRC_GOODS_PANTA',
        'U',
        GETDATE(),
        'N'
    FROM inserted i
    INNER JOIN dbo.MCGOODVENDOR mg ON i.VENDORID = mg.VENDORID AND mg.PANTA_DISP_YN = 'Y';
END;

-- SMPVENDORS > 공급사
CREATE TRIGGER TRG_SMPVENDORS
ON dbo.SMPVENDORS
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;

    -- PANTA_YN이 'N'으로 변경된 경우만 처리
    INSERT INTO dbo.SRC_GOODS_TRIG (GOOD_IDEN_NUMB, TABLE_NAME, [ACTION], INSERTDATE, STATUS)
    SELECT 
        mg.GOOD_IDEN_NUMB,  
        'SRC_GOODS_PANTA',
        'U',
        GETDATE(),
        'Y'
    FROM inserted i
    INNER JOIN deleted d ON i.VENDORID = d.VENDORID  -- 업데이트된 데이터만 확인
    INNER JOIN dbo.MCGOODVENDOR mg ON i.VENDORID = mg.VENDORID
    WHERE d.PANTA_YN <> 'N'		-- 기존값이 'N'이 아니었고
    AND i.PANTA_YN = 'N'		-- 새 값이 'N'으로 변경된 경우
    AND mg.PANTA_DISP_YN = 'Y';	-- 팬타온 진열 상품만
END;
